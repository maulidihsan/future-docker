version: '3'
services:
  traefik:
    image: traefik:v2.0.2
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik-public"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - traefik-public
    deploy:
      placement:
        constraints:
          - node.role == manager
  nginx:
    image: maulidihsan/nginx-shared
    networks:
      - traefik-public
    stdin_open: true
    tty: true
    volumes:
      - "/mnt/nginx:/etc/nginx/conf.d"
      - "/mnt/wordpress:/opt/app"
    deploy:
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.nginx.rule=HostRegexp(`{subdomain:[a-z]+}.website.ku`)"
        - "traefik.http.routers.nginx.entrypoints=web"
        - "traefik.http.services.nginx.loadbalancer.server.port=80"
  php-fpm:
    image: maulidihsan/php-fpm
    networks:
      - traefik-public
    volumes:
      - "/mnt/wordpress:/opt/app"
    stdin_open: true
    tty: true
    deploy:
      placement:
        constraints:
          - node.role == worker
  redis:
    image: maulidihsan/redis
    networks:
      - traefik-public
    deploy:
      placement:
        constraints:
          - node.role == worker

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - monitor-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8088:8080
    networks:
      - monitor-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitor-net     
    deploy:
      placement:
        constraints:
          - node.role==manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.rule=HostRegexp(`prom.dash-website.ku`)"
        - "traefik.http.routers.prometheus.entrypoints=web"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      restart_policy:
        condition: on-failure
  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - monitor-net
    deploy:
      placement:
        constraints:
          - node.role==manager
      labels:
        - "traefik.http.routers.grafana.rule=HostRegexp(`grafana.dash-website.ku`)"
        - "traefik.http.routers.grafana.entrypoints=web"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      restart_policy:
        condition: on-failure
networks:
  traefik-public:
    external: true
  monitor-net:
    driver: overlay
    external: true

volumes:
  prometheus_data: {}
  grafana_data: {}

